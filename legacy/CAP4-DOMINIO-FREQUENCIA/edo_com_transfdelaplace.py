# -*- coding: utf-8 -*-
"""EDO com TransfDeLaplace.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NNFunpWrHyf1ANzfuwMSB8dUGJXThlaD
"""

# Commented out IPython magic to ensure Python compatibility.
# Exibir tudo no mesmo documento
# %matplotlib inline

# Trazer o módulo SymPy para o nosso programa
import sympy
from sympy.integrals.transforms import inverse_laplace_transform
from sympy import *
t = sympy.symbols('t')
c, C = sympy.symbols('c C', cls=Function)
s = sympy.symbols('s')

# Print mais bonito no SymPy
init_printing(use_unicode=True)

# Condicoes Iniciais - NULAS
y0 = 0
dy_0 = 0

print("Resolução da EDO: d²c(t)/dt² + 12 dc(t)/dt + 32c(t) = t²")
print("Condições iniciais: c(0) = 0, c'(0) = 0")

# Transformada de Laplace de t²
R_s = 2/(s**3)
print("\nTransformada de Laplace de t²:")
print(f"L[t²] = {R_s}")

# Defina aqui a equação diferencial no domínio 's'
# s²C(s) - sy(0) - y'(0) + 12(sC(s) - y(0)) + 32C(s) = 2/s³
equacao_em_s = Eq(((s**2)*C(s) - s*y0 - dy_0) + 12*(s*C(s) - y0) + 32*C(s), R_s)

print("\nEquação no domínio s:")
print(f"{(s**2)*C(s) - s*y0 - dy_0} + {12*(s*C(s) - y0)} + {32*C(s)} = {R_s}")
print(f"{s**2*C(s)} + {12*s*C(s)} + {32*C(s)} = {R_s}")
print(f"C(s)({s**2} + {12*s} + {32}) = {R_s}")

# Resolve a equação para C(s)
C_s = solve(equacao_em_s, C(s))
print("\nSolução para C(s):")
print(f"C(s) = {C_s[0]}")

# Função de transferência G(s) = C(s)/R(s)
G_s = C_s[0] / R_s
print("\nFunção de transferência G(s) = C(s)/R(s):")
print(f"G(s) = {G_s}")
print(f"G(s) simplificado = {simplify(G_s)}")

# Faz a Transformada Inversa de Laplace da solução C(s)
solucao = inverse_laplace_transform(C_s[0], s, t)
print("\nSolução c(t) (Transformada inversa de Laplace de C(s)):")
print(f"c(t) = {solucao}")

# Resposta formatada de maneira expandida e melhorada
solucao_expandida = solucao.expand()
print("\nSolução c(t) expandida:")
print(f"c(t) = {solucao_expandida}")

# Verificação: substituindo t=0 e verificando se c(0) = 0
valor_em_t0 = solucao.subs(t, 0)
print("\nVerificação da condição inicial c(0):")
print(f"c(0) = {valor_em_t0}")