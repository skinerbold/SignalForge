# -*- coding: utf-8 -*-
"""calcula_InversaLaplace.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1BUP_6AUnajXxemMe1SzA89gU86jaaOeg
"""

# Importando o modulo SymPy que faz trata de Cálculo Avançado
import sympy

# Definir o simbolo das funções no domínio 's'
s, t = sympy.symbols('s, t')

# Definir a função interna SymPy que calcula da Transformada Inversa de Laplace
def Inversa(F):
    return sympy.inverse_laplace_transform(F, s, t, noconds=True)

# Função para calcular e exibir a transformada inversa de Laplace
def calcular_e_exibir_inversa(F, label):
    print(f"\n{label}:")
    print(f"F(s) = {F}")
    
    # Decompõe a função em frações parciais
    fracoes_parciais = F.apart(s)
    print(f"Frações parciais: {fracoes_parciais}")
    
    # Calcula a transformada inversa
    resultado = Inversa(fracoes_parciais)
    print(f"f(t) = {resultado}")
    print(f"f(t) simplificado = {sympy.simplify(resultado)}")
    
    return resultado

# a) F(s) = 1/(s²−2s−3)
F_a = 1/(s**2-2*s-3)
f_a = calcular_e_exibir_inversa(F_a, "a) F(s) = 1/(s²−2s−3)")

# b) F(s) = (5s+45)/(s⁹)
F_b = (5*s+45)/(s**9)
f_b = calcular_e_exibir_inversa(F_b, "b) F(s) = (5s+45)/(s⁹)")

# c) F(s) = (-s)/(s³+1)
F_c = (-s)/(s**3+1)
f_c = calcular_e_exibir_inversa(F_c, "c) F(s) = (-s)/(s³+1)")

# d) F(s) = (s³+81)/(s⁴+12s²+11)
F_d = (s**3+81)/(s**4+12*s**2+11)
f_d = calcular_e_exibir_inversa(F_d, "d) F(s) = (s³+81)/(s⁴+12s²+11)")

print("\nResumo dos resultados:")
print("a) f(t) =", f_a)
print("b) f(t) =", f_b)
print("c) f(t) =", f_c)
print("d) f(t) =", f_d)





