# -*- coding: utf-8 -*-
"""RespostaEstadoNulo.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1pINOeAUOnD7aor8chu0MktffwGLmKLgY

Resposta ao estado nulo
"""

import sympy as sp

def calcular_resposta_estado_nulo(h_tau_expr, x_tau_expr, t_value=1):
    # Definindo t e tau como símbolos
    t, tau = sp.symbols('t tau')
    
    # Definindo as funções h(tau) e x(tau)
    h_tau = h_tau_expr
    x_tau = x_tau_expr
    
    # Definindo a convolução y(t)
    convolution = sp.integrate(x_tau * h_tau.subs(tau, t - tau), (tau, 0, t))
    
    # Simplificando a expressão
    simplified_convolution = convolution.simplify()
    
    # Avaliando y(t) para t = t_value
    y_value = simplified_convolution.subs(t, t_value)
    
    return simplified_convolution, y_value

# Resolução do item a)
print("Resolução do item a):")
print("h(t) = e^(-t) - e^(-2t), x(t) = 500")

t, tau = sp.symbols('t tau')
h_tau_a = sp.exp(-tau) - sp.exp(-2*tau)
x_tau_a = 500

y_t_a, y_1_a = calcular_resposta_estado_nulo(h_tau_a, x_tau_a)

print("y(t) = ", y_t_a)
print(f"y(1) = {y_1_a.evalf()}")

# Resolução do item b)
print("\nResolução do item b):")
print("h(t) = 3e^(-6t) + e^(-t), x(t) = e^t")

h_tau_b = 3*sp.exp(-6*tau) + sp.exp(-tau)
x_tau_b = sp.exp(tau)

y_t_b, y_1_b = calcular_resposta_estado_nulo(h_tau_b, x_tau_b)

print("y(t) = ", y_t_b)
print(f"y(1) = {y_1_b.evalf()}")